<?php

/**
 * Search through sets of possible locale directories for JSON files
 * which define (key => value) mappings for I18n strings, and generate
 * out a list of all discovered mappings locally.
 */

require(__DIR__ . "/functions.php");

if (count($argv) < 2) {
  throw new Exception("Needs file root parameter");
}

$root = $argv[1];
if (!file_exists($root . "/locale-discovery.json")) {
  throw new Exception("No locale-discovery.json found in '$root'");
}

$json = json_decode(file_get_contents($root . "/locale-discovery.json"), true /* assoc */);

// add default parameters
$json += array(
  'src' => 'vendor/*/*',
  'locales' => array(
    // 'fr' => 'generated/locale/fr.json',
  ),
  'generate_php' => true,
  'depth' => 3
);

if (!is_array($json['src'])) {
  $json['src'] = array($json['src']);
}
if (!$json['locales']) {
  throw new Exception("No locales defined in locale-discovery.json");
}

// make target directories as necessary
make_target_directories($json['locales']);

// now load all of the components
$all_dirs = get_all_directories($root, $json['depth']);
echo "Found " . count($all_dirs) . " potential subdirectories\n";
$selected_dirs = array();
foreach ($json['src'] as $pattern) {
  $selected_dirs = array_merge($selected_dirs, get_directories_to_search($all_dirs, $pattern));
}
echo "Filtered to " . count($selected_dirs) . " matching paths\n";

// default locale strings are empty
$locales = array();
foreach ($json['locales'] as $code => $ignored) {
  $locales[$code] = array();
}

if ($selected_dirs) {
  $filename = "locales.json";
  echo "Processing locale components...\n";

  $count = 0;
  foreach ($selected_dirs as $dir) {
    if (file_exists($dir . "/" . $filename)) {
      $assets = json_decode(file_get_contents($dir . "/" . $filename), true);
      if (!$assets) {
        throw new Exception("Could not load JSON from '$dir/$filename'");
      }

      foreach ($json['locales'] as $code => $ignored) {
        if (isset($assets[$code])) {
          if (!is_array($assets[$code])) {
            $assets[$code] = array($assets[$code]);
          }

          foreach ($assets[$code] as $path) {
            $locales[$code] = array_merge($locales[$code], get_matching_paths($dir, $path));
          }
        }

      }

      $count++;
    }
  }

  echo "Found $count locale-producing components\n";

}

foreach ($locales as $code => $includes) {
  echo "Processing " . count($includes) . " '$code' includes...\n";
  $result = array();
  foreach ($includes as $include) {
    $result = array_merge($result, json_decode(file_get_contents($include), true /* as assoc */));
  }

  // sort it
  ksort($result);

  // write it out
  $out = $json['locales'][$code];
  $fp = fopen($out, "w");
  if (!$fp) {
    throw new Exception("Could not open destination file '" . $out . "' for writing");
  }

  // we write this out manually so we can format it
  $first = true;
  fwrite($fp, "{");
  foreach ($result as $key => $value) {
    if (!$first) {
      fwrite($fp, ",");
    }
    $first = false;
    fwrite($fp, "\n  " . json_encode($key) . ": " . json_encode($value));
  }
  fwrite($fp, "\n}\n");
  fclose($fp);

  echo "Wrote " . count($result) . " $code strings to '$out'\n";

  if ($json['generate_php']) {
    $php = str_replace(".json", ".php", $out);

    $fp = fopen($php, "w");
    if (!$fp) {
      throw new Exception("Could not open destination file '" . $php . "' for writing");
    }

    // we write this out manually so we can format it
    $first = true;
    fwrite($fp, "<?php\n\n/**\n * $code template file\n * Generated by locale-discovery at " . date('r') . "\n */\n\n");
    fwrite($fp, '$' . "result = array(\n");
    foreach ($result as $key => $value) {
      fwrite($fp, "\t\"" . phpescapestring($key) . "\" => \"" . phpescapestring($value) . "\",\n");
    }
    fwrite($fp, ");\n");
    fclose($fp);

    echo "Wrote " . count($result) . " $code strings to '$php'\n";

  }
}

// TODO write PHP files
